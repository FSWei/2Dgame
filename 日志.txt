2023/10/13 17:04
√ 1、背景的添加（可以分成上下两层，一个bg，一个map）
√ 2、颜色在update时的改变，包括背景，前景，人物等
√3、enemy的添加
4、加速度的添加（可以把纵向和横向的updatetime分开来写，以实现重力加速度和横向加速度的效果）

2023/10/14 13:09
√1、把输入处理、更新游戏状态、渲染画面分开来写
√2、把C语言的代码改为C++
3、把游戏状态改为枚举类型
√4、状态机

2023/10/15 17:04
√1、拆分为多文件
√2、多线程update以实现enemy和player的不同速度
√3、循环依赖问题
√4、加入互斥锁，以解决多线程导致的光标混乱问题
√5、碰到enemy时的判负问题

2023/10/15 20:48
1、实现背景的滚动、背景的动画效果
√2、camera

2023/10/16 00:00
1、靠近敌人的时候在上方显示血条
2、开场动画
3、敌人死亡后显示爆炸效果
4、音乐的添加（分形音乐）
5、打击感
6、关卡的设置
7、装备系统
8、游戏的剧情以及动画
9、rpg 肉鸽 横板过关
10、可以做成俯视图（主城）和横板过关结合的形式

2023/10/16 22:09
√1、实现游戏的循环
√2、第三次及以后的choice输入时的上下键自动切换为曾输入值的现象————Windows的cmd窗口的功能
√3、第二次及以后的scanf choice自动填充一个y的问题————原因同上，是因为按了→键

2023/10/17 17:26
√1、清空输入缓冲区、getchar、_getch等等
√2、把颜色转换单独写成一个函数

2023/10/18 11:47 21:12
√1、关于标准输入缓冲区和控制台输入缓冲区————FlushConsoleInputBuffer(GetStdHandle(STD_INPUT_HANDLE)); // 清空输入缓冲区
2、添加pos_ prepos，把update和render完全分开————player似乎无法实现，因为player类是通过不断接收用户输入而产生移动，一旦用户停止输入，prepos会自动更新为最新的pos，导致bug，反观enemy类，无需接收用户输入，所以不用担心prepos的更新行为
***3、双缓冲更新背景
√4、实现多颜色

2023/10/19 10:18
1、可以加入伪3d
√2、添加边框
***√3、冲刺————残影拖尾还未添加
按下j，isdash=true，角色横纵速度*3，/*或者瞬间完成三次更新，或者updatetime/100*/，留下拖尾，一秒后拖尾消失
最终决定用纵横速度*3，虽然这样写麻烦一点，但是其他两种方法只是单纯的加快速度，并不能达到冲刺突进效果，比如跳跃的时候，它只是加快了跳跃和下坠

2023/10/20 15:23
√1、有一个小bug，在跳跃到最高点的瞬间松开w键然后按j，会毫无反应————在去掉向下冲刺的功能后，这个bug随之解决
2、game类的添加，架构的规范
√3、bg背景颜色的改变
√4、把player的每个技能和检测都抽离成单独的函数，不要全都直接写在update里
√5、还有一个很久以前就遇到的bug，当MAXHOP为3时（可以刚好跳四格高），角色跳不上高度为3的墙，但是后来在修改代码过程中这个bug消失了
√6、把map类和background类里存放地图和背景的二维数组由char类型改为结构体类型，在存储字符的同时也存储它的颜色，方便以后的开发
（也可以直接用int类型的二维数组数组，每个元素里直接存储这个位置的颜色，然后根据颜色去判断它是什么类型的方块，是WALL还是其他之类的。但是这里我仍然选择前者）
√7、把所有的render都放到camera_render线程，player和enemy等线程只负责update————删除prepos

2023/10/21 11:34
√1、冲刺突进技能改为只能向上和左右使用，不能向下
√2、关于字体颜色的问题：
目前所使用的SetConsoleTextAttribute来设置颜色，似乎只能支持有限的颜色，这样后期想用控制台去绘制一些背景的时候效果会不好
解决方法有两个
一是使用关于ansi转义序列的CONSOLE_SCREEN_BUFFER_INFOEX、colortable、rgb等win api来以rgb格式设置字体和背景颜色，但是刚刚尝试了一下，似乎不行
详见https://learn.microsoft.com/zh-cn/windows/console/console-virtual-terminal-sequences中的“扩展颜色”
似乎windows默认自带的控制台不支持那么多颜色，而是某些虚拟终端仿真器支持比 Windows 控制台提供的 16 种颜色更多的颜色调色板。
二是用脚本把图片转换为字符画的时候，把不同颜色的像素聚类，这样会使呈现出来的效果差一点，但是也别无他法了
关于ansi转义序列和虚拟终端的参考资料
https://blog.walterlv.com/post/enable-virtual-terminal-processing.html
https://learn.microsoft.com/zh-cn/windows/console/setconsolemode?wt.mc_id=MVP
https://learn.microsoft.com/zh-cn/windows/console/getconsolemode
https://en.wikipedia.org/wiki/ANSI_escape_code
https://learn.microsoft.com/zh-cn/windows/console/console-virtual-terminal-sequences
https://learn.microsoft.com/zh-cn/windows/console/console-screen-buffer-infoex#members

16:03
关于字体颜色的问题，经过几个小时的探索，找到了两个方法：
其一：首先通过GetConsoleScreenBufferInfoEx获取标准输出的CONSOLE_SCREEN_BUFFER_INFOEX，然后以RGB格式修改其中的ColorTable属性,最后用SetConsoleTextAttribute设置
但是探索很长时间后，发现怎么修改都是没有效果。遂放弃
其二：直接用ansi转义符，设置背景和前景颜色，这个方法成功了，通过printf("\x1B[38;2;%d;%d;%dm\x1B[48;2;%d;%d;%dm", i, j, k, k, j, i);设置前景和背景颜色
打印字符之后，再用printf("\x1B[0m");恢复默认状态即可
详细的测试代码见文件夹test里的color_test.cpp
*(改是改好了，但是卡顿和闪烁问题变得很严重，双缓冲问题亟待解决)*

√3、颜色修改过程中，用到了"整数打包"和"整数解包"的技术，测试代码见test\data_pack.cpp
4、修改vscode工作区里2dgame子目录test下的cpp文件单独使用一个.vscode配置
5、在cmd控制台中光标偶尔会莫名其妙自己显现出来，但是似乎不是代码的问题而是系统的问题


2023/10/22 12:41
1、今天开始着手双缓冲的优化
测试代码见exe\double_buffer_test.cpp，里面实现了基本的双缓冲逻辑
但是其实测试代码中的方法不能用于我的2dgame，因为其中对于颜色的修改还是通过修改Attributes属性来实现，这样输出的颜色有很大的局限性
而我要通过ansi转义符来实现颜色的更改
目前所想的解决办法是在consoleBuffer中预留出空间，专门用于存储颜色转换的ANSI转义符和恢复默认的ANSI转义符
(这样会使screen的内存占用增多42倍，但是应该对性能影响不会太大)

还有一种思路，就是用两个线程交替渲染————错误，交替渲染也需要用mutex来阻塞，防止指针混乱，这样不但不能防止卡顿，还会影响性能

甚至可以把画面拆分成两块，启动两个线程，一个渲染左边，一个渲染右边，似乎也可以达到一样的效果

还有一个小问题，那就是以前的代码中是直接用gotoxy来进行绘制，无需考虑换行问题，而改用双缓冲后，需要考虑换行

**2、或者用NCurses重写代码**

16:33
尝试了很长时间的方法（见exe\double_buffer_test2.cpp），代码的难度太大，计算比较复杂

2023/10/23 10:38
今天开始进行蓝桥杯准备，此项目暂时搁置

2023/10/24 18:59
白天又调试了一下Double_Buffer_test2.cpp，仍然存在一些小问题

2023/11/6 19:57
今天再次调试了Double_Buffer_test3.cpp，bug仍然存在，估计就是因为缓冲区中的字符数远远超出了控制台长度（即使转义字符根本不会在控制台中实际显示出来）
其实我也不确定错误原因究竟是什么，而且我感觉很可能不是这个原因👆
不管了，放弃这个方法
下面简单阐述一下思路
首先是一个 返回值类型 为 字符串 的 Color 函数，接收的参数为 前景色rgb 和 背景色rgb共六个（其实可以优化成两个int类型，用位运算解码），具体功能就是把颜色信息转成ANSI转义符，然后返回这个字符串
然后是 返回值为 空 的 SetChar 函数，接收的参数为横坐标x，纵坐标y，要打印的字符c，和 前景色rgb 背景色rgb，具体功能就是在缓冲区字符串中写入带有颜色转义序列的字符，和换行符
我本来是打算用结构体来表示一个字符，成员有 char c;字符 int forecolor;前景色 int backcolor;背景色，然后用一个二维数组来表示缓冲区，在SetChar函数中，先根据forecolor和backcolor来生成颜色转义序列，然后把字符c和换行符写入缓冲区
最终失败
放弃了，继续探索其他方法

也就是说，目前游戏中的颜色仍然有局限，想要在屏幕上绘制像素画仍然是有局限性的
并且也没有实现双缓冲，刷新机制仍然不平滑

2023/11/8 14:03
👆👆👆不不不，记错了，其实颜色已经实现了ansi转义序列控制，现在唯一的问题就是无法在使用转义序列控制颜色的同时使用双缓冲

2023/11/9 19:24
地图的生成与存储

2023/11/10 17:00
用python脚本生成地图的时候，前景地图的字符为 W ，背景为 . ，主要的任务是读取图片中的颜色，并以RGB的格式存储